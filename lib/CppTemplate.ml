(*
  CppTemplate.ml
  --------------
  Definitions for C++ code generation template

  This module exposes:
  - functions to generate C++ source code from a lexing rule

*)

module CppTemplate = struct
  (*----------------------------------------------------------------------------*)
  (* Module Initialization                                                      *)
  (*----------------------------------------------------------------------------*)
  
  open MyParsing
  open CodeGen
  
  let ttable_gen ( ttable : CodeGen.ttable ) : string =
    let row_to_str ( row : int array ) : string =
      let elems = Array.map string_of_int row in
      let inner = String.concat ", " ( Array.to_list elems ) in
      Printf.sprintf "{ %s }" inner in
    let rows = Array.map row_to_str ttable in
    let body = String.concat ",\n" ( Array.to_list rows ) in
    Printf.sprintf "inline contexpr std::array<std::array<size_t, %d>, %d> __ttable = {\n%s\n};" 
      (Array.length ttable.(0)) (Array.length ttable) body

  let ctable_gen ( ctable : CodeGen.ctable ) : string = 
    let elems = Array.map (fun i -> if i != -1 then string_of_int i else "NO_TAG") ctable in
    let count = Array.length ctable in 
    let inner = String.concat ", " ( Array.to_list elems ) in
    Printf.sprintf "inline constexpr std::array<size_t, %d> __ctable = { %s };" count inner 

  let action_gen ( caseIndex : int ) ( case : MyParsing.case ): string =
    let alias_string = if String.length case.alias != 0 then case.alias else "" in
    match case.pattern with 
    | MyParsing.Eof | MyParsing.None -> ""
    | _ -> Printf.sprintf {|inline auto __case%d(const char* yytex) {
    auto %s = yytex;
    %s 
}
|} caseIndex alias_string case.code


  let template ( ctx : CodeGen.source_context) : string =
    let ttable_str = ttable_gen ctx.ttable in 
    let ctable_str = ctable_gen ctx.ctable in 
    let _rulename = ctx.lex_file.rule.name in
    let action_strings = List.mapi action_gen ctx.lex_file.rule.cases in
    let action_strings = String.concat "\n" action_strings in
    Printf.sprintf {|/// ------------------------------------------------------------------------------------
/// Auto-generated by LexerGen
/// Changes made in this file will be overwritten by subsequent runs of LexerGen
/// ------------------------------------------------------------------------------------

#include <array>
#include <cstdef>

inline constexpr size_t NO_TAG = -1;

%s
%s 
%s
inline size_t __traverse(const char* yytex, size_t yymax, size_t& yyindex) {
    size_t tag = NO_TAG;
    for (size_t state = %d;state != %d && yyindex < yymax; state = __ttable[state][yytex[yyindex++]])
    { 
        tag = (__ctable[state] == NO_TAG ? tag : __ctable[state]);
    }
    return tag;
}

|} ttable_str ctable_str action_strings ctx.start ctx.dead


  let context ( out_file : string ) : CodeGen.gen_context = 
    {
      out_file = out_file;
      gen_function = template;
    }

end